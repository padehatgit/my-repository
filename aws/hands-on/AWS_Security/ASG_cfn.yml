AWSTemplateFormatVersion: 2010-09-09
Description: |
  This template creates ASG with LT and Policy

Parameters:

  InstanceType:
    Description: Select your instance type.
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.nano
      - t3.micro
      - m1.small
  MyKeyPair:
    Description: Select your keypair.
    Type: AWS::EC2::KeyPair::KeyName

  Subnets:
    Description: Select at least 2 subnets
    Type: List<AWS::EC2::Subnet::Id>

  VPC:
    Description: Select your VPC
    Type: AWS::EC2::VPC::Id

Mappings:

  RegionImageMap:
    us-east-1:
      AMI: ami-0b5eea76982371e91
    us-east-2:
      AMI: ami-0233c2d874b811deb
    us-west-1:
      AMI: ami-0ed05376b59b90e46
    us-west-2:
      AMI: ami-0dc8f589abe99f538
    eu-west-1:
      AMI: ami-058b1b7fe545997ae
  
Resources:

  MyAsgPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref MyASG # Required
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 60.0

  MyASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: 1
      HealthCheckGracePeriod: 90
      HealthCheckType: ELB
      LaunchTemplate:
        LaunchTemplateId: !Ref MyLaunchTemplate
        Version: 1
      MaxSize: 2 # Required
      MinSize: 1 # Required
      TargetGroupARNs:
        - !Ref MyTargetGrp
      VPCZoneIdentifier: !Ref Subnets

  MyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions: # Required
        - Type: forward
          TargetGroupArn: !Ref MyTargetGrp
      LoadBalancerArn: !Ref MyALB  # Required
      Port: 80
      Protocol: HTTP

  MyALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: osvaldocfnelb
      SecurityGroups:
        - !GetAtt MySecGrp.GroupId
      Subnets: !Ref Subnets
      Type: application

  MyLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !FindInMap
          - RegionImageMap
          - !Ref "AWS::Region"
          - AMI
        InstanceType: !Ref InstanceType
        KeyName: !Ref MyKeyPair
        SecurityGroupIds:
          - !GetAtt MySecGrp.GroupId
        UserData: !Base64 |

          #!/bin/bash -x
          #update os
          yum update -y

          #install apache server
          yum install -y httpd

          # create a custom index.html file
          chmod -R 777 /var/www/html
          echo "<html>
          <head>
              <title> Web Server Running in AWS</title>
          </head>
          <body>
              <h1>This web server is protected by AWS WAF</h1>
          </body>
          </html>" > /var/www/html/index.html

          # start apache server
          systemctl start httpd
          systemctl enable httpd
      LaunchTemplateName: osvaldocfnlt


  MyTargetGrp:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC

  MySecGrp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and HTTP # Required
      GroupName: osvaldocfnsecgrp
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
  
Outputs:
  ShowDNS:
    Description: DNS of ALB
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt MyALB.DNSName